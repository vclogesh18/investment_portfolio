import express from 'express';
import pool from '../config/database.js';
import { authenticateToken, requireAdmin } from '../middleware/auth.js';

const router = express.Router();

// GET /api/blocks/:pageId - Get content blocks for a page
router.get('/:pageId', async (req, res) => {
  try {
    const { pageId } = req.params;
    
    const query = `
      SELECT * FROM content_blocks 
      WHERE page_id = $1 AND is_active = true
      ORDER BY position, id
    `;
    
    const result = await pool.query(query, [pageId]);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching content blocks:', error);
    res.status(500).json({ error: 'Failed to fetch content blocks' });
  }
});

// POST /api/blocks - Create new content block (admin only)
router.post('/', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const {
      page_id,
      block_type,
      title,
      content,
      position = 0
    } = req.body;

    if (!page_id || !block_type) {
      return res.status(400).json({ error: 'Page ID and block type are required' });
    }

    const query = `
      INSERT INTO content_blocks (
        page_id, block_type, title, content, position
      ) VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `;

    const values = [page_id, block_type, title, content, position];
    const result = await pool.query(query, values);

    res.status(201).json({
      success: true,
      block: result.rows[0]
    });
  } catch (error) {
    console.error('Error creating content block:', error);
    res.status(500).json({ error: 'Failed to create content block' });
  }
});

// PUT /api/blocks/:id - Update content block (admin only)
router.put('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const {
      block_type,
      title,
      content,
      position,
      is_active
    } = req.body;

    const query = `
      UPDATE content_blocks 
      SET 
        block_type = COALESCE($1, block_type),
        title = COALESCE($2, title),
        content = COALESCE($3, content),
        position = COALESCE($4, position),
        is_active = COALESCE($5, is_active),
        updated_at = NOW()
      WHERE id = $6
      RETURNING *
    `;

    const values = [block_type, title, content, position, is_active, id];
    const result = await pool.query(query, values);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Content block not found' });
    }

    res.json({
      success: true,
      block: result.rows[0]
    });
  } catch (error) {
    console.error('Error updating content block:', error);
    res.status(500).json({ error: 'Failed to update content block' });
  }
});

// PUT /api/blocks/:id/position - Update block position (admin only)
router.put('/:id/position', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { position } = req.body;

    if (position === undefined) {
      return res.status(400).json({ error: 'Position is required' });
    }

    const query = `
      UPDATE content_blocks 
      SET position = $1, updated_at = NOW()
      WHERE id = $2
      RETURNING *
    `;

    const result = await pool.query(query, [position, id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Content block not found' });
    }

    res.json({
      success: true,
      block: result.rows[0]
    });
  } catch (error) {
    console.error('Error updating block position:', error);
    res.status(500).json({ error: 'Failed to update block position' });
  }
});

// DELETE /api/blocks/:id - Delete content block (admin only)
router.delete('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    const result = await pool.query(
      'DELETE FROM content_blocks WHERE id = $1 RETURNING *',
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Content block not found' });
    }

    res.json({
      success: true,
      message: 'Content block deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting content block:', error);
    res.status(500).json({ error: 'Failed to delete content block' });
  }
});

export default router;